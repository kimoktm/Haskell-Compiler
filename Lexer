import java_cup.runtime.Symbol;
%%
%class Lexer

%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
	return new Symbol(sym.EOF, null);
%eofval}

%state COMMENT
%state BLOCKBEGIN
%state BLOCKEND

KEYWORD=data|type|deriving|if|then|else|otherwise|where|True|False
DATATYPE=String|Bool|Integer|Int|Char
FUNCTOR=Eq|Ord|Enum|Ix|Bounded|Read|Show
ALPHA=[A-Za-z]
SMALL=[a-z]
LARGE=[A-Z]
DIGIT=[0-9]
ALPHA_NUMERIC={ALPHA}|{DIGIT}
IDENTIFIER={ALPHA}({ALPHA_NUMERIC})*

NUMBER=({DIGIT})
CHARACTER=[\'][^\',\n][\']
STRING=[\"][^\",\n]+[\"]
COMMENT_TEXT=[^(?!-}$).*]
NEW_LINE=([\n])+
WHITE_SPACE=([\ \r\t\f\b])+
%%

<YYINITIAL> "--" {
  yybegin(COMMENT);
}

<COMMENT> [^\n] {
}

<COMMENT> [\n] {
  yybegin(YYINITIAL);
}

<YYINITIAL> "{-" {
  yybegin(BLOCKBEGIN);
}

<BLOCKBEGIN> [^\-] {
}

<BLOCKBEGIN> "-" {
  yybegin(BLOCKEND);
}

<BLOCKEND> [^\}] {
  yybegin(BLOCKBEGIN);
}

<BLOCKEND> "}" {
  yybegin(YYINITIAL);
}

<YYINITIAL> "if" {
	return new Symbol(sym.IF, yytext());
}

<YYINITIAL> "then" {
	return new Symbol(sym.TN, yytext());
}

<YYINITIAL> "else" {
	return new Symbol(sym.ES, yytext());
}

<YYINITIAL> "otherwise" {
	return new Symbol(sym.OW, yytext());
}

<YYINITIAL> "True" {
	return new Symbol(sym.TR, yytext());
}

<YYINITIAL> "False" {
	return new Symbol(sym.FS, yytext());
}

<YYINITIAL> "error" {
	return new Symbol(sym.ER, yytext());
}

<YYINITIAL> {KEYWORD} { 
	return new Symbol(sym.KW, yytext());
}

<YYINITIAL> {DATATYPE} { 
	return new Symbol(sym.DT, yytext());
}

<YYINITIAL> {FUNCTOR} { 
	return new Symbol(sym.FR, yytext());
}

<YYINITIAL> {NUMBER} { 
	return new Symbol(sym.NM, ""+Integer.parseInt(yytext()));
}

<YYINITIAL> {IDENTIFIER} { 
	return new Symbol(sym.ID, yytext());
}

<YYINITIAL> {CHARACTER} { 
	return new Symbol(sym.CH, yytext());
}

<YYINITIAL> {STRING} { 
	return new Symbol(sym.ST, yytext());
}

<YYINITIAL> "," { 
	return new Symbol(sym.FA, yytext());
}

<YYINITIAL> "|" { 
	return new Symbol(sym.BR, yytext());
}

<YYINITIAL> "::" { 
	return new Symbol(sym.HT, yytext());
}

<YYINITIAL> ":" { 
	return new Symbol(sym.CL, yytext());
}

<YYINITIAL> ";" { 
	return new Symbol(sym.SM, yytext());
}

<YYINITIAL> "+" { 
	return new Symbol(sym.PO, yytext());
}

<YYINITIAL> "-" { 
	return new Symbol(sym.MO, yytext());
}

<YYINITIAL> "*" { 
	return new Symbol(sym.MB, yytext());
}

<YYINITIAL> "/" { 
	return new Symbol(sym.DV, yytext());
}

<YYINITIAL> "=>" { 
	return new Symbol(sym.DA, yytext());
}

<YYINITIAL> ".." { 
	return new Symbol(sym.DD, yytext());
}

<YYINITIAL> "!!" { 
	return new Symbol(sym.FN, yytext());
}

<YYINITIAL> "_" { 
	return new Symbol(sym.WC, yytext());
}

<YYINITIAL> ">" { 
	return new Symbol(sym.GT, yytext());
}

<YYINITIAL> "<" { 
	return new Symbol(sym.LT, yytext());
}

<YYINITIAL> "->" { 
	return new Symbol(sym.AR, yytext());
}

<YYINITIAL> "[]" { 
	return new Symbol(sym.EL, yytext());
}

<YYINITIAL> "==" { 
	return new Symbol(sym.EQ, yytext());
}

<YYINITIAL> ">=" { 
	return new Symbol(sym.GE, yytext());
}

<YYINITIAL> "<=" { 
	return new Symbol(sym.LE, yytext());
}

<YYINITIAL> "||" { 
	return new Symbol(sym.OO, yytext());
}

<YYINITIAL> "&&" { 
	return new Symbol(sym.AA, yytext());
}

<YYINITIAL> "++" { 
	return new Symbol(sym.CN, yytext());
}

<YYINITIAL> "(" { 
	return new Symbol(sym.LB, yytext());
}

<YYINITIAL> ")" { 
	return new Symbol(sym.RB, yytext());
}

<YYINITIAL> "[" { 
	return new Symbol(sym.LS, yytext());
}

<YYINITIAL> "]" { 
	return new Symbol(sym.RS, yytext());
}

<YYINITIAL> "{" { 
	return new Symbol(sym.LC, yytext());
}

<YYINITIAL> "}" { 
	return new Symbol(sym.RC, yytext());
}

<YYINITIAL> "=" { 
	return new Symbol(sym.AO, yytext());
}

<YYINITIAL> {NEW_LINE} { 
	return new Symbol(sym.NL, yytext());
}

<YYINITIAL> {WHITE_SPACE} { 
}

<YYINITIAL> . { 
	return new Symbol(sym.error, "Error!");
}