import java_cup.runtime.*;

/* Karim Tarek      22-466  */
/* Ahmed Jihad      22-3855 */

/*****************************/
/*         Terminals         */
/*****************************/
terminal				ID, KW, DT, FR, NM, FA, BR, HT, CL, SM, PO, MO, MB, DV, DA, DD, FN, WC, GT, LT,
						AR, EL, EQ, GE, LE, CN, LB, RB, LS, RS, LC, RC, CH, ST, AO, AA, OO, IF, ES, TN, OW,
						TR, FS, ER, NL;



/*****************************/
/*       non-Terminals       */
/*****************************/
nonterminal	String		program, statement_list, statement, statement_line, expression, lst_init, lst_content, var_name,
						operand, function, conditional_if, conditional_stmnt, conditional_list, conditional_expr,
						relational_expr, term, literal, params_clist, params_list, operand_expr;

precedence left			ES, TN, MO, PO, MB, DV;



/*****************************/
/*          Grammar          */
/*****************************/
program ::= 
			  statement_list
			| statement_list statement;


statement_list ::= 
			  statement_list statement_line
			| /* empty */;


statement_line ::= 
			  statement NL
			| NL;


statement ::= 
			  ID var_name AO expression
			| ID var_name BR conditional_list BR OW AO operand
			| ID var_name BR conditional_list NL BR OW AO operand
			| ID EL AO lst_init
			| ID LB ID CL ID RB AO lst_content
			| error {: AP.error(); :};


expression ::= 
			  conditional_if 
			| operand;


conditional_list ::=
			  conditional_stmnt
			| conditional_list BR conditional_stmnt
			| conditional_list NL BR conditional_stmnt;


conditional_stmnt ::= 
			conditional_expr AO operand;


conditional_if ::= 
			  IF conditional_expr TN expression ES expression
			| IF conditional_expr TN expression ES NL expression;


conditional_expr ::= 
			  conditional_expr OO relational_expr
			| conditional_expr AA relational_expr
			| relational_expr;


relational_expr ::= 
			  operand EQ operand
			| operand LT operand
			| operand GT operand
			| operand LE operand
			| operand GE operand;


operand ::= 
			  operand_expr 
			| LB operand_expr RB;


operand_expr ::=
			  term MO operand
			| term PO operand
			| term MB operand
			| term DV operand
			| term;


term ::=
			  literal
			| function;


function ::=
			  ID LB params_clist RB
			| ID params_list;


params_clist ::=
			  operand
			| params_clist FA operand;


params_list ::=
			  literal
			| params_list literal;


lst_content ::= 
			  operand 
			| operand CL operand
			| operand CN operand;


lst_init ::= NM | EL | ER ST;

var_name ::= ID | NM | MO ID | MO NM;

literal ::= ID | NM | MO ID | MO NM | TR | FS;